#!/usr/bin/env python3
#
# pj3d
# Manage a 3D printing job
#
# A job is defined as a set of parts that are printed together
# Multiple jobs may be required to assemble objects.

import argparse
import sys
import os
from pathlib import Path
import subprocess
import json

from plater3d.job import PrintJob
from plater3d.plate import PlatesFile

def load_job(args):
    fn = PrintJob.name2file(args.jobname)
    if fn.exists():
        job = PrintJob.load(fn)
        return job
    else:
        print(f"ERROR: Job '{args.jobname}' does not exist, file {fn} missing.", file=sys.stderr)
        return None

def create(args):
    fn = PrintJob.name2file(args.jobname)
    if fn.exists():
        print(f"ERROR: Cannot create job '{args.jobname}', already exists as {fn}", file=sys.stderr)
        return 1

    if not os.path.exists(args.print_settings):
        print(f"ERROR: Print settings file {args.print_settings} does not exist")
        return 1

    job = PrintJob(args.jobname)
    os.mkdir(args.jobname + ".job")
    job.set_print_params(args.machine, args.extruder, args.print_settings)
    job.save(fn)
    return 0

def setparams(args):
    job = load_job(args)
    if job is None: return 1

    if not os.path.exists(args.print_settings):
        print(f"ERROR: Print settings file {args.print_settings} does not exist")
        return 1

    job.set_print_params(args.machine, args.extruder, args.print_settings)
    job.save()
    return 0

def add_models(args):
    job = load_job(args)
    if job is None: return 1

    stlfiles = [Path(x).resolve() for x in args.stlfiles]
    for p in stlfiles:
        if not p.exists():
            print(f"ERROR: {p} does not exist.")
            return 1

    for p in stlfiles:
        print(f"Adding {args.copies} copies of {p}")
        job.add_model(str(p), args.copies, args.group)

    job.compute_unique_stems()
    job.save()
    return 0

def rm_models(args):
    job = load_job(args)
    if job is None: return 1

    stlfiles = [Path(x).resolve() for x in args.stlfiles]
    for p in stlfiles:
        print(f"Removing {args.copies} copies of {p}")
        job.remove_model(str(p), args.copies)

    job.save()
    return 0

def ls_models(args):
    job = load_job(args)
    if job is None: return 1
    print(f"Machine: {job.machine}, Extruder: {job.extruders[0]}, Print Settings: {job.print_settings}")
    for p in job.stlfiles:
        uniq = job.fileprops[p].get('unique', 'NOTSET')
        group = job.fileprops[p].get('group')
        group = ("/" + group) if group is not None else ''
        print(f"{p}({uniq}{group}): {job.counts[p]} copies, {job.done.get(p, 0)} done.")

    return 0

def pack(args):
    job = load_job(args)
    if job is None: return 1

    op = job.root / "stlinfo.json"
    r = subprocess.run(['stlinfo', '--poly2d', '-o', str(op)] + job.stlfiles)

    if r.returncode != 0:
        print(f"ERROR: stlinfo failed.", file=sys.stderr)
        return 1

    # combine counts and stlinfo
    with open(op, "r") as f:
        stlinfo = json.load(fp=f)

    for m in stlinfo['files']:
        m['count'] = job.counts[m['name']]
        m['group'] = job.fileprops[m['name']].get('group', None)

    with open(op, "w") as f:
        json.dump(stlinfo, fp=f, indent='  ')

    # run packer
    cmds = []
    if args.border: cmds.extend(("-b", args.border))
    if args.volxyz: cmds.extend(("--volxyz", args.volxyz))
    if not args.no_tight: cmds.append("--tight")
    if args.max_height_diff: cmds.extend(("--max-height-diff", args.max_height_diff))
    cmds.append(op)

    ppout = job.root / 'plates.json'
    r = subprocess.run(['platepacker', '-o', str(ppout)] + cmds)
    return 0

def vispack(args):
    job = load_job(args)
    if job is None: return 1

    op = job.root / 'plates.json'
    if not op.exists():
        print("ERROR: {op} does not exist. Run pack before visualization", file=sys.stderr)
        return 1

    subprocess.run(['vispackings', str(op)])
    return 0

def printplate(args):
    job = load_job(args)
    if job is None: return 1

    op = job.root / 'plates.json'
    if not op.exists():
        print("ERROR: {op} does not exist. Run pack before printing", file=sys.stderr)
        return 1


    unique_stems = ",".join([f"{x}:{job.fileprops[x]['unique']}" for
                             x in job.fileprops if 'unique' in job.fileprops[x]])

    cmds = []
    cmds.extend(("-s", str(job.print_settings)))
    cmds.extend(("--op", str(job.root / job.name)))
    cmds.extend(("-m", job.machine))
    cmds.extend(("-x", str(job.extruders[0])))
    cmds.extend(("-l", str(job.root / 'print.log')))
    cmds.extend(("--unique", unique_stems))
    cmds.append(str(op))

    r = subprocess.run(['printplate'] + cmds)
    return r.returncode

def printpart(args):
    job = load_job(args)
    if job is None: return 1

    op = job.root / "stlinfo.json"
    with open(op, "r") as f:
        stlinfo = json.load(fp=f)

    if args.all and len(args.stlfiles) > 0:
        print(f"ERROR: Can't specify --all and STL files in the same printpart command")
        return 1

    if len(args.stlfiles) == 0 and not args.all:
        print(f"WARNING: No parts specified, assuming --all")
        args.all = True

    if not args.all:
        parts = [Path(x).resolve() for x in args.stlfiles]
        job_stlfiles = set(job.stlfiles)
        p_stlfiles = set([str(p) for p in parts])
        diff = p_stlfiles - job_stlfiles
        if len(diff):
            print(f"ERROR: Parts {diff} are not part of the job")
            return 1
    else:
        parts = [Path(x) for x in job.stlfiles]

    for part in parts:
        cmds = ['--slicer-binary', 'CuraEngine', '--appimage']
        cmds.extend(("-s", str(job.print_settings)))
        cmds.extend(("-m", job.machine))
        cmds.extend(("-x", str(job.extruders[0])))
        cmds.append(str(part))
        #TODO: this can be overwritten!
        cmds.extend(("-o", str(job.root / (part.stem + '.gcode'))))

        r = subprocess.run(['plater3d'] + cmds)
        if r.returncode != 0:
            return r.returncode

    return 0

def markdone(args):
    job = load_job(args)
    if job is None: return 1

    if args.plate:
        op = job.root / 'plates.json'
        if not op.exists():
            print("ERROR: Plate file {op} does not exist", file=sys.stderr)
            return 1

        pf = PlatesFile.load(op)
        parts = set()
        for plate in args.plate:
            if plate >= len(pf.plates):
                print(f"ERROR: Plate {plate} is invalid", file=sys.stderr)
                return 1

            part_counts = {}

            for part in pf.plates[plate].parts:
                part_counts[part.name] = part_counts.get(part.name, 0) + 1
                parts.add(part.name)

            print(f"Plate #{plate}:")
            for part, count in part_counts.items():
                print("  ", count, "of", part)

    else:
        parts = job.stlfiles

    for p in parts:
        done = job.done.get(p, 0)
        needed = job.counts[p]
        if done == needed:
            print(f"{p} completed")
        else:
            while True:
                print(f"{needed-done} of {p} still required, how many printed? [0]", end=' ')
                count = input()
                if count != "":
                    try:
                        printed = int(count)
                        if printed <= needed - done:
                            # negative numbers are okay to mark not done
                            job.mark_done(p, printed)
                            print(f"Marked {printed} parts done, {needed - (done + printed)} remaining")
                            break
                        else:
                            print(f"Count {printed} exceeds {needed - done} remaining.")
                    except ValueError:
                        print(f"{count} is not a valid integer. Try again.")
                else:
                    break

    job.save()
    return 0

if __name__ == "__main__":
    p = argparse.ArgumentParser(description="Manage a 3D printing job")
    p.add_argument("jobname", help="Job name. Must be usable as a filename.")

    sp = p.add_subparsers(dest='command')

    cp = sp.add_parser('create', help='Create a new job')
    cp.add_argument("machine", help="Machine")
    cp.add_argument("print_settings", help="Print settings file to use")
    cp.add_argument("extruder", nargs="?", help="Extruder number", default=0, type=int)
    cp.set_defaults(function=create)

    setp = sp.add_parser('setparams', help='Set or change parameters of a print job')
    setp.add_argument("machine", help="Machine")
    setp.add_argument("print_settings", help="Print settings file to use")
    setp.add_argument("extruder",  nargs="?", help="Extruder number", default=0, type=int)
    setp.set_defaults(function=setparams)

    ap = sp.add_parser('add', help='Add models to job')
    ap.add_argument("stlfiles", nargs="+", help="STL files to add")
    ap.add_argument("-c", dest='copies', help="Number of copies", type=int, default=1)
    ap.add_argument("-g", dest='group', help="Set group of part")
    ap.set_defaults(function=add_models)

    rp = sp.add_parser('rm', help='Remove models from job')
    rp.add_argument("stlfiles", nargs="+", help="STL files to remove")
    rp.add_argument("-c", dest='copies', help="Number of copies to remove", type=int, default=1)
    rp.set_defaults(function=rm_models)

    lp = sp.add_parser('ls', help='List models in job')
    lp.set_defaults(function=ls_models)

    packp = sp.add_parser('pack', help='Pack models into plates')
    packp.add_argument("-b", dest="border", metavar="BORDER", help="Border around each object")
    packp.add_argument("--volxyz", dest="volxyz", help="Comma-separated 3D volume")
    packp.add_argument("--mhd", dest="max_height_diff", help="Maximum allowable height difference between models in plate")
    packp.add_argument("--no-tight", dest="no_tight", help="Do not produce a 'tight' packing", action='store_true')
    packp.set_defaults(function=pack)

    visp = sp.add_parser('vispack', help='Visualize packed plates')
    visp.set_defaults(function=vispack)

    printp = sp.add_parser('print', help='Print plates')
    printp.set_defaults(function=printplate)

    markdonep = sp.add_parser('done', help='Mark completed prints, by part')
    markdonep.add_argument('plate', nargs="*", type=int, metavar="PLATE", help="Update only parts on PLATE")
    markdonep.set_defaults(function=markdone)

    printpartp = sp.add_parser('printpart', help='Print part')
    printpartp.add_argument('stlfiles', nargs="*", help='STL Files to print')
    printpartp.add_argument("--all", action="store_true", help="Print all parts")
    printpartp.set_defaults(function=printpart)

    args = p.parse_args()

    if args.command is None:
        p.print_usage()
        sys.exit(1)

    sys.exit(args.function(args))
