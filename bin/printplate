#!/usr/bin/env python3
# -*- mode: python -*-

import argparse
import json
from pathlib import Path
import sys
import numpy as np
from collections import namedtuple
import itertools
import subprocess
import shlex
from tempfile import TemporaryDirectory
import os
import re

from plater3d.config import Config, get_appimage_default

PLATE_SPEC_RE = re.compile(r"(?P<num>\d+)(-(?P<end>\d+))?")

def parse_plate_spec(spec, num_plates):
    spec = [x.strip() for x in spec.split(",")]

    # does not remove duplicates
    out = []

    for s in spec:
        m = PLATE_SPEC_RE.match(s)
        if m is None:
            print(f"ERROR: Syntax incorrect for plate specification {s}", file=sys.stderr)
            return None
        else:
            num = int(m.group('num'))
            end = m.group('end')

            if end:
                end = int(end)

                if num > end:
                    print(f"ERROR: Range {num}-{end} start is greater than end.", file=sys.stderr)
                    return None
                elif end >= num_plates:
                    print(f"ERROR: Plate {end} is out of range, only {num_plates} present, range is 0 to {num_plates-1}.",
                          file=sys.stderr)
                    return None

            if num < 0 or num >= num_plates:
                print(f"ERROR: Plate {num} is out of range, only {num_plates} present, range is 0 to {num_plates-1}.",
                      file=sys.stderr)
                return None

            if num and end:
                out.extend(range(num, end+1))
            else:
                out.append(num)

    return out

def rename_mesh(stlfile, index, container_dir, unique_stem = None):
    if container_dir is None:
        return stlfile

    if unique_stem is None:
        unique_stem = stlfile.name

    n = f"{index}_{unique_stem}"

    # dup is added to accommodate files from different directories
    dup = 0
    while (container_dir / n).exists():
        dup += 1
        n = f"{index}_{dup}_{unique_stem}"

    dst = container_dir / n

    os.symlink(stlfile.resolve(), dst)

    return dst

def fixup_gcode_headers(gcode_file, container_dir):
    cmds = []
    if container_dir:
        cmds.append(f"s|^;MESH:{container_dir}/|;MESH:|")

    cmd = ['sed', '-i', "\n".join(cmds), gcode_file]
    subprocess.run(cmd)

object_settings = namedtuple('object_settings', 'file index position')

if __name__ == "__main__":
    p = argparse.ArgumentParser(description="Generate GCODE for packed plates")
    p.add_argument("packing", help='JSON file containing packing info')
    p.add_argument("-p", dest="modelpath", help="Path for object files", default=".")
    p.add_argument("-s", dest="settings_file", help="Settings file")
    p.add_argument("--op", dest="oprefix", metavar="PREFIX", help="Output prefix for gcode files.", default="plate")
    p.add_argument("-m", dest="machine", help="Machine name to pass to plater3d", default="")
    p.add_argument("-x", dest="extruder", help="Extruder to pass to extruder", default="0")
    p.add_argument("-l", dest="logfile", help="Logfile", default="printplate.log")
    p.add_argument("--no-header-fixup", help="Do not fix up the Gcode headers", action="store_true")
    p.add_argument("--no-rename-mesh", help="Do not rename meshes to incorporate index", action="store_true")
    p.add_argument("--only", help="Comma-separated list of plates to print, also accepts ranges. e.g. 0,3-5,8")
    p.add_argument("--unique", help="Comma-separated list of colon-separated file and its unique stem (for internal use only)")

    args = p.parse_args()

    config = Config()
    if config.configfile.exists():
        print(f"Using config file: {config.configfile}", file=sys.stderr)
    else:
        print(f"WARNING: Configuration file {config.configfile} does not exist.", file=sys.stderr)

    pplog = open(args.logfile, "w")

    root = Path(args.modelpath)
    with open(args.packing, "r") as f:
        packing = json.load(fp=f)

    stlinfo = dict([(i['name'], i) for i in packing["stlinfo"]["files"]])
    binpath = Path(__file__).parent
    unique = {}
    if args.no_rename_mesh:
        container_dir = None
    else:
        container_dir_temp = TemporaryDirectory(".plater")
        container_dir = Path(container_dir_temp.name)
        if args.unique:
            unique = dict([x.split(":") for x in args.unique.split(",")])

    if args.only:
        only = parse_plate_spec(args.only, len(packing["plates"]))
        if only is None: sys.exit(1)
    else:
        only = range(0,len(packing["plates"]))

    volxyz = packing["volxyz"]

    for pno in only:
        print(f"Printing plate {pno}", file=sys.stderr)
        p = packing["plates"][pno]
        d = []
        objects = []
        for obj in p["parts"]:
            si = stlinfo[obj['name']]
            filecoordxyz = si['min_point']
            platecoordxy = obj['position'][0:2]
            index = obj['index']
            fn = rename_mesh(root / obj['name'], index, container_dir,
                             unique_stem = unique.get(obj['name'], None))

            xlatcoord = [0-filecoordxyz[0]+platecoordxy[0],
                         0-filecoordxyz[1]+platecoordxy[1],
                         0-filecoordxyz[2]]

            # for some reason, cura aligns 0,0 of the plate to be in the center
            # we need to adjust for that

            xlatcoord = [xlatcoord[0] - volxyz[0]//2,
                         xlatcoord[1] - volxyz[1]//2,
                         xlatcoord[2]]

            if not fn.exists():
                print(f"ERROR: {fn} does not exist, use -p to specify a model path if needed", file=sys.stderr)
                continue

            objects.append(object_settings(file=fn, index=index,
                                           position=[round(c, 2) for c in xlatcoord]))

        files = []
        pos = []
        for o in objects:
            # leading space is to handle -negative offsets
            pos.append("--offxyz")
            pos.append(" "+",".join([str(x) for x in o.position]))
            pos.append("--rotxyz")
            pos.append("0")
            files.append(str(o.file))

        if args.settings_file:
            pos = pos + ["-s", args.settings_file]

        output_gcode = f"{args.oprefix}.{pno}.gcode"
        appimage = ['--appimage'] if config.get_slicer_prop('cura5', 'appimage',
                                                            default=get_appimage_default(),
                                                            type_=bool) else []

        cmdline = [f'{binpath/"plater3d"}', '--slicer-binary', config.get_slicer_prop('cura5', 'binary', default='CuraEngine')] + appimage + ['-o', output_gcode, "-m", args.machine, "-x", args.extruder] + pos + files

        if args.no_header_fixup:
            cmdline.append("--no-header-fixup")

        print(shlex.join(cmdline), file=pplog)

        r = subprocess.run(cmdline, stdout=pplog, stderr=pplog)
        if r.returncode != 0:
            print("ERROR: plater3d failed", file=sys.stderr)
            sys.exit(1)
        else:
            if not args.no_header_fixup:
                fixup_gcode_headers(output_gcode, container_dir)

            if not args.no_rename_mesh and container_dir:
                for o in objects:
                    print(f"Removing", o.file)
                    os.unlink(o.file)

    if not args.no_rename_mesh and container_dir:
        container_dir_temp.cleanup()

    print(f"Wrote log to {args.logfile}", file=sys.stderr)
    pplog.close()
