#!/usr/bin/env python3

import argparse
from plater3d.plate import PlatesFile

def vistext(plate, w=120, h=120, res = 5):
    gridx = (w + res - 1) // res
    gridy = (h + res - 1) // res

    grid = [['.' for i in range(gridx)] for j in range(gridy)]


    for i, part in enumerate(plate.parts):
        x, y, w, h = part.position

        for xx in range(x, x+w):
            for yy in range(y, y+h):
                grid[gridy - yy//res][xx//res] = chr(i+97)

    for row in grid:
        print(''.join(row))

def bounds(parts):
    minx = min([p.x for p in parts])
    miny = min([p.y for p in parts])
    maxx = max([p.x+p.w for p in parts])
    maxy = max([p.y+p.h for p in parts])

    return (minx, miny, maxx, maxy)

def center(parts, area):
    minx, miny, maxx, maxy = bounds(parts)

    areaw = area[2] - area[0]
    areah = area[3] - area[1]
    partsw = maxx - minx
    partsh = maxy - miny
    if partsw > areaw: return False
    if partsh > areah: return False

    centerx = (areaw - partsw) // 2
    centery = (areah - partsh) // 2

    for p in parts:
        p.x = area[0] + (p.x - minx) + centerx
        p.y = area[1] + (p.y - miny) + centery

    return True

def stripes(parts, axis=0):
    assert axis==0 or axis==1


    oaxis = 1 - axis  # y if axis is x
    extent = 3 if oaxis == 1 else 2 # h if oaxis is y

    # TODO
    # sort by yend if axis is x
    # this is because as soon as a part's yend < the current parts ybegin, we can stop processing
    # more parts
    #sp = sorted(parts, key=lambda p: p.position[oaxis] + p.position[extent], reversed=True)

    # for each border part
    #   a part forms the vertical border if its x is the lowest for all y
    #    and vice versa for horizontal border

    # two parts belong to the same horizontal stripe if their y-ranges overlap
    part_stripes = dict([(p.key, p.key) for p in parts])

    def find(ko):
        if part_stripes[ko] == part_stripes[ko]:
            return part_stripes[ko]
        else:
            k = find(part_stripes[ko])
            part_stripes[ko] = k
            return k

    def union(o1, o2):
        ko1 = find(o1.key)
        ko2 = find(o2.key)
        if ko1 is ko2: return
        if ko1 < ko2:
            part_stripes[ko2] = ko1
        else:
            part_stripes[ko1] = ko2

    for p in parts:
        for p2 in parts:
            kp = find(p.key)
            kp2 = find(p2.key)

            if kp is kp2:
                continue

            p2begin = p2.position[oaxis]
            p2end = p2begin + p2.position[extent]
            pbegin = p.position[oaxis]
            pend = pbegin + p.position[extent]

            if not (p2end < pbegin or pend < p2begin):
                # parts overlap on an axis, so merge their stripes
                union(p, p2)

    pd = dict([(p.key, p) for p in parts])
    reps = part_stripes.values()

    stripe2parts = {}
    for (p, r) in part_stripes.items():
        r = find(r)
        if r not in stripe2parts:
            stripe2parts[r] = []

        stripe2parts[r].append(pd[p])

    return stripe2parts.values()

def centerx(*parts):
    b = bounds(parts)
    area = [0, b[1], 120, b[3]]
    if not center(parts, area):
        print("centering failed")

def centery(*parts):
    b = bounds(parts)
    area = [b[0], 0, b[2], 120]
    if not center(parts, area):
        print("centering failed")

def centerstripes(parts, axis = 0):
    s = stripes(parts, axis)

    for stripe in s:
        if axis == 0:
            centerx(*stripe)
        else:
            centery(*stripe)

def autocenterstripes(parts):
    sx = stripes(parts, 0)
    sy = stripes(parts, 1)

    def compute_area(sl):
        b = bounds(sl)
        w = (b[2]-b[0])
        h = (b[3]-b[1])
        return w*h

    areax = sum([compute_area(sl) for sl in sx])
    areay = sum([compute_area(sl) for sl in sy])

    if areax < areay:
        for sl in sx:
            centerx(*sl)
    else:
        for sl in sy:
            centery(*sl)

def platecmds(plate, border):
    handlers = {'cx': centerx, 'cy': centery, 'cxs': lambda: centerstripes(plate.parts, 0),
                'cys': lambda: centerstripes(plate.parts, 1),
                'cas': lambda: autocenterstripes(plate.parts)}
    parts = dict([(chr(i+97), part) for i, part in enumerate(plate.parts)])

    while True:
        vistext(plate, res=border)
        print("cmd> ", end='')
        cmd = input()
        if cmd:
            if cmd == 'q':
                break
            else:
                eval(cmd, handlers, parts)


if __name__ == "__main__":
    p = argparse.ArgumentParser(description="Adjust a given packing")
    p.add_argument("packing", help="JSON containing packing information")

    args = p.parse_args()

    packing = PlatesFile.load(args.packing)

    for i, plate in enumerate(packing.plates):
        platecmds(plate, border=packing.border)

    print("save? (y/n)", end='')
    yn = input()
    if yn.upper() == 'Y':
        packing.save()
        print("saved")
