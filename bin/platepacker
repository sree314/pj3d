#!/usr/bin/env python3
# -*- mode: python -*-

import argparse
import json
import sys
from rectpack import newPacker
import rectpack
import math
from collections import namedtuple

Rect = namedtuple('Rect', 'key x y z part')

class Part:
    def __init__(self, stlinfo):
        self.stlinfo = stlinfo
        self.name = self.stlinfo['name']
        self.dimint = [round(x) for x in stlinfo['dimensions']]

        # this means that different copies of the same stl cannot be
        # in different groups when assigned from file
        self.group = self.stlinfo.get('group', None)

    def fits(self, volxyz, borderxy, rotate = 0):
        if rotate != 0:
            raise NotImplementedError(f"rotation={rotate} not supported")

        fits = True
        for i, b in zip(range(3), [borderxy, borderxy, 0]):
            fits = fits and not (self.dimint[i] + b) > volxyz[i]

        return fits

def parse_triple(vol):
    vol = vol.split(',')

    if len(vol) > 3:
        print("ERROR: {vol} needs to be a triple", file=sys.stderr)
        return None

    out = []
    for x in vol:
        out.append(int(x))

    if len(out) < 3:
        out.extend([out[-1] for i in range(3-len(out))])

    return out

def get_parts(stlinfo):
    out = {}
    for f in stlinfo['files']:
        out[f['name']] = Part(f)

    return out

def get_rects(partinfo, vol, border, plateborder):
    rects = []
    for p in partinfo:
        pp = partinfo[p]
        if not pp.fits(vol, border + plateborder):
            print(f"{pp.name}: Part does not fit, dimensions={pp.dimint}, border={border}, plateborder={plateborder}, volume={vol}, skipping.")
        else:
            for c in range(pp.stlinfo.get('count', 1)):
                # arguably the 2*border is more conservative
                # the alternative is to shrink the plate by border as well
                rects.append(Rect(key=(pp.name, c),
                                  x=pp.dimint[0]+2*border,
                                  y=pp.dimint[1]+2*border,
                                  z=pp.dimint[2],
                                  part=pp))

    return rects

def group_rects(rects, height_diff = 10):
    # use existing groups when provided
    groups = []
    pg = {}
    nogroup = []
    for r in rects:
        if r.part.group is not None:
            if r.part.group not in pg: pg[r.part.group] = []
            pg[r.part.group].append(r)
        else:
            nogroup.append(r)

    groups.extend([x for x in pg.values()])

    # split ungrouped rects by height
    byz = sorted(nogroup, key=lambda x: x[3])
    lastz = byz[0][3]
    group = []

    for r in byz:
        z = r[3]
        if (z - lastz) > height_diff:
            groups.append(group)
            group = []
            lastz = z

        group.append(r)

    if len(group):
        groups.append(group)

    return groups

def pack(rects, volxyz, border, plateborder = 0, center_packing = True, center_volxyz = None):
    p = newPacker(sort_algo = rectpack.SORT_LSIDE, rotation=False)
    p.add_bin(volxyz[0] - 2*plateborder, volxyz[1] - 2*plateborder, count=float('inf'))

    for nc, x, y, _, _ in rects:
        p.add_rect(x, y, nc)

    p.pack()

    plates = {}
    for r in p.rect_list():
        b,x,y,w,h,nc = r
        if b not in plates: plates[b] = {'_bounds': [None, None, None, None]}
        plates[b][nc] = (x+border, y+border, w-2*border, h-2*border)

        plate_bounds = plates[b]['_bounds']

        plate_bounds[0] = min(x, plate_bounds[0]) if plate_bounds[0] is not None else x
        plate_bounds[1] = min(y, plate_bounds[1]) if plate_bounds[1] is not None else y

        plate_bounds[2] = max(x+w, plate_bounds[2]) if plate_bounds[2] is not None else x+w
        plate_bounds[3] = max(y+h, plate_bounds[3]) if plate_bounds[3] is not None else y+h

    if center_packing:
        if center_volxyz is None: center_volxyz = volxyz
        for b in plates:
            bounds = plates[b]['_bounds']
            center_x = (center_volxyz[0] - plateborder - (bounds[2] - bounds[0])) // 2
            center_y = (center_volxyz[1] - plateborder - (bounds[3] - bounds[1])) // 2
            for p in plates[b]:
                if p == '_bounds': continue
                x, y, w, h = plates[b][p]
                plates[b][p] = (x + center_x + plateborder, y + center_y + plateborder, w, h)
    elif plateborder > 0:
        for b in plates:
            for p in plates[b]:
                if p == '_bounds': continue
                x, y, w, h = plates[b][p]
                plates[b][p] = (x + plateborder, y + plateborder, w, h)

    return plates

def tight_vol(group, border, volxyz):
    mw = None
    mh = None
    area = 0
    for p in group:
        w, h, z = p.x, p.y, p.z
        if mw is None or w > mw: mw = w
        if mh is None or h > mh: mh = h
        area += w * h

    rad = max(round(math.sqrt(area / math.pi)), mw, mh)
    rad = rad + 2 * border

    return [rad, rad, volxyz[2]]

def packing_to_plate(packing, groupno):
    plate = {'parts': []}

    for obj in packing:
        if obj == '_bounds':
            plate["bounds"] = packing[obj]
        else:
            objinfo = {'name': obj[0],
                       'index': obj[1],
                       'group': groupno,
                       'position': list(packing[obj])
            }

            plate['parts'].append(objinfo)

    return plate

def repack_tight(parts, plate, border, plateborder, volxyz, groupno, center_packing = True):
    rects = []

    for obj in plate['parts']:
        part = parts[obj['name']]
        rects.append(Rect(key = (obj['name'], obj['index']),
                          x = obj['position'][2] + 2*border,
                          y = obj['position'][3] + 2*border,
                          z = part.dimint[2],
                          part = part))

    tvolxyz = tight_vol(rects, border, volxyz)

    growx = (volxyz[0] - 2*plateborder - tvolxyz[0] + border-1) // border
    growy = (volxyz[1] - 2*plateborder - tvolxyz[1] + border-1) // border

    # TODO
    if growx <= 0: growx = 1
    if growy <= 0: growy = 1

    tries = 1
    while True:
        pp = pack(rects, tvolxyz, border, plateborder, center_packing, center_volxyz = volxyz)
        if len(pp) == 1:
            # TODO: some metric of improvement?
            print(f"Tightening finished after {tries} attempts.")
            break
        tvolxyz[0] = min(volxyz[0], tvolxyz[0] + growx)
        tvolxyz[1] = min(volxyz[1], tvolxyz[1] + growy)
        tries += 1

    return packing_to_plate(pp[0], groupno)

if __name__ == "__main__":
    p = argparse.ArgumentParser(description="")
    p.add_argument("stlinfo", help="STL information (JSON file)")
    p.add_argument("-b", dest="border", type=int, help="Border (mm)", default=3)
    p.add_argument("--volxyz", help="Printer volume", default="120")
    p.add_argument("--pb", dest="plateborder", help="Plate border (usually for first layer skirt/brim/etc.)", default=3, type=int)
    p.add_argument("--max-height-diff",
                   help="Maximum height difference between parts on the same plate", default=15, type=int)
    p.add_argument("-o", dest="output", help="Output file")
    p.add_argument("--no-centering", dest="centering", help="Do not center packings", action="store_false")
    p.add_argument("--tight", dest="tight", help="Produce a 'tight' packing", action="store_true")

    args = p.parse_args()

    volxyz = parse_triple(args.volxyz)
    if volxyz is None:
        sys.exit(1)

    with open(args.stlinfo, "r") as f:
        d = json.load(fp=f)

    parts = get_parts(d)
    rects = get_rects(parts, volxyz, args.border, args.plateborder)

    plate_output = {"type": 'plate',
                    "stlinfo": d,
                    "border": args.border,
                    "volxyz": volxyz,
                    "max_height_diff": args.max_height_diff,
                    "plates": []
                    }

    for groupno, group in enumerate(group_rects(rects, height_diff = args.max_height_diff)):
        plates = pack(group, volxyz, args.border, args.plateborder, center_packing = args.centering)
        if len(plates) == 0:
            print("ERROR: packing failed. Try reducing border (-b) or plateborder (--pb).")
            break

        for p in plates:
            plate = packing_to_plate(plates[p], groupno)
            if args.tight:
                plate = repack_tight(parts,
                                     plate, args.border, args.plateborder,
                                     volxyz, groupno,
                                     center_packing = args.centering)

            plate_output["plates"].append(plate)

    if args.output:
        with open(args.output, "w") as f:
            json.dump(plate_output, fp=f, indent='  ')

        print(f"Wrote {len(plate_output['plates'])} plates to {args.output}", file=sys.stderr)
    else:
        for pno, p in enumerate(plate_output["plates"]):
            for o in p["parts"]:
                print(pno, o['name'], o['index'], o['position'])
