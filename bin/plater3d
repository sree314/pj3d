#!/usr/bin/env python3
# -*- mode: python3 -*-

import argparse
import shutil
import os
import sys
from plater3d.appimage import AppImage2
from plater3d.slicers.cura5 import CURA5Config
import logging
from collections import namedtuple
import tempfile
import subprocess

def read_gcode_header(logfile):
    with open(logfile, "r") as f:
        header = []
        in_header = False
        for l in f:
            if l.startswith('Gcode header after slicing:'):
                in_header = True
                continue

            if l.startswith('End of gcode header.'):
                break

            if in_header: header.append(l)

    return header

def parse_triple(triple, default='0.0'):
    v = triple.split(',')
    if len(v) > 3:
        print("ERROR: triple={triple} contains more than 3 components")
        sys.exit(1)

    if len(v) < 3:
        v.extend([default for i in range(3 - len(v))])

    for i in range(3):
        v[i] = float(v[i]) if v[i] else float(default)

    return tuple(v)

# temporary
part = namedtuple('part', 'filename offset rotation')

if __name__ == "__main__":
    p = argparse.ArgumentParser(description="Plate a set of STL models")
    p.add_argument("--slicer-binary", help="Slicer binary")
    p.add_argument("--slicer", choices=['cura5'], default='cura5', help="Choose slicer type")
    p.add_argument("--appimage", action="store_true", help="Slicer binary is an appimage")
    p.add_argument("stlfiles", nargs="+", help="STL files to slice")
    p.add_argument("-o", dest="output", help="Output file")
    p.add_argument("-s", dest="settings", action="append", help="Load slicer settings from file")
    p.add_argument("--offxyz", dest="offxyz", action="append", help="Specify offsets for x, y, z for each object (if multiple)")
    p.add_argument("--rotxyz", dest="rotxyz", action="append", help="Specify rotations for x, y, z for each object (if multiple)")
    p.add_argument("-n", dest="dry_run", action="store_true", help="Do not actually run slicer")
    p.add_argument("-m", dest="machine", help="Machine")
    p.add_argument("-x", dest="extruder", help="Extruder number", type=int, default=0)
    p.add_argument("--no-header-fixup", action="store_true", help="Fixup the header since we're running CuraEngine in sequential mode")

    logging.basicConfig(level = logging.DEBUG )

    args = p.parse_args()

    if args.slicer_binary:
        fp = shutil.which(args.slicer_binary)
        if not fp:
            print("ERROR: {args.slicer_binary} could not be found",
                  file=sys.stederr)
            sys.exit(1)
        print(f"Using {fp} as binary", file=sys.stderr)
        args.slicer_binary = fp

    if args.slicer == "cura5":
        slicer_config = CURA5Config(args.slicer_binary, args.appimage)
    else:
        raise NotImplementedError(f'Slicer {args.slicer} not implemented')

    slicer_config.load_native_config()
    if not args.machine in slicer_config._machines:
        print(f"ERROR: {args.machine} is not a valid machine. Choices: ", file=sys.stderr)
        print(",".join(slicer_config._machines.keys()))
        sys.exit(1)

    if args.offxyz is not None and (len(args.offxyz) != len(args.stlfiles)):
        print(f"ERROR: --offxyz ({len(args.offxyz)}) needs to match number of stlfiles ({len(args.stlfiles)})")
        sys.exit(1)

    if args.rotxyz is not None and (len(args.rotxyz) != len(args.stlfiles)):
        print("ERROR: --rotxyz needs to match number of stlfiles")
        sys.exit(1)

    if len(args.stlfiles) > 1:
        if args.offxyz is None:
            print("ERROR: Multiple STL files need --offxyz for each")
            sys.exit(1)

        if args.rotxyz is None:
            args.rotxyz = ["0"] * len(args.stlfiles)

        stlfiles = []
        for f, off, rot in zip(args.stlfiles, args.offxyz, args.rotxyz):
            stlfiles.append(part(filename = f, offset = parse_triple(off), rotation = parse_triple(rot)))
    else:
        stlfiles = [part(filename=f,
                         offset = parse_triple(args.offxyz[0]) if args.offxyz is not None else None,
                         rotation = parse_triple(args.rotxyz[0]) if args.rotxyz is not None else None) for f in args.stlfiles]

    settings = []
    if args.settings:
        for s in args.settings:
            settings.append(slicer_config.load_settings_from_file(s))
    else:
        print("ERROR: Loading from Cura configuration is disabled. Please use -s.")
        sys.exit(1)

        # for m in slicer_config._machines.keys():
        #     extruder = 0
        #     ext = slicer_config._mac2extruders[m][extruder]
        #     settings.append(slicer_config.load_settings_from_config(m, ext))
        #     break

    h, logfile = tempfile.mkstemp(suffix='.log')
    os.close(h)

    print(f"Writing CuraEngine log to {logfile}")

    with open(logfile, "w") as f:
        slicer_config.invoke_slicer(args.machine, args.extruder, settings, stlfiles, args.output, dry_run = args.dry_run, logfile=f)

    if not args.no_header_fixup:
        header = read_gcode_header(logfile)
        lines = len(header)
        replacement = ''.join(header).replace('\n', '\\n')
        subprocess.run(['sed', '-i', f'1,+{lines}c{replacement}', args.output])
        print(''.join(header))
